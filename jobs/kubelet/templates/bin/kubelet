#!/bin/bash
set -eu
<%

  apiserver = link('api').p('cluster.ip')
  if apiserver.empty?
    apiserver = link('api').instances.first.address
  end
  if apiserver.empty?
    raise "Unable to determine what hostname / fqdn / ip to talk to k8s apiserver via.  Do you need to set the \`cluster.ip' property?"
  end

-%>

JOB=kubelet
BIN=kubelet
SIGTERM_FOR=15
SIGKILL_FOR=5

RUN_DIR=/var/vcap/sys/run/$JOB
LOG_DIR=/var/vcap/sys/log/$JOB
JOB_DIR=/var/vcap/jobs/$JOB
CERTS_DIR=/var/vcap/data/k8s/certs
DAT_DIR=/var/vcap/data/k8s/$JOB
PIDFILE=$RUN_DIR/$BIN.pid
exec >>$LOG_DIR/$BIN.log 2>&1

# set kube-* binaries in our path
export PATH=$PATH:/var/vcap/packages/k8s/bin

case $1 in
  start)
    mkdir -p $RUN_DIR

    # FIXME: wait for containerd to be up and running

    echo "[$(date)] $BIN/$$: starting up..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          exit 1
        fi
        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi

    echo "[$(date)] $BIN/$$: turning off swap..."
    swapoff -a
    free
    echo

    echo "[$(date)] $BIN/$$: refreshing our kubeconfig..."
    mkdir -p $DAT_DIR
    kubectl config set-cluster <%= link('api').p('cluster.name') %> \
        --certificate-authority=$JOB_DIR/tls/ca/cert.pem \
        --embed-certs=true \
        --server=https://<%= apiserver %>:6443 \
        --kubeconfig=$DAT_DIR/kubeconfig
    kubectl config set-credentials system:nodes:node \
        --client-certificate=$CERTS_DIR/kubelet/cert.pem \
        --client-key=$CERTS_DIR/kubelet/key.pem \
        --embed-certs=true \
        --kubeconfig=$DAT_DIR/kubeconfig
    kubectl config set-context default \
        --cluster=<%= link('api').p('cluster.name') %> \
        --user=system:nodes:node \
        --kubeconfig=$DAT_DIR/kubeconfig
    kubectl config use-context default --kubeconfig=$DAT_DIR/kubeconfig
    echo

    echo "[$(date)] $BIN/$$: starting up kubelet..."
    echo $$ > $PIDFILE
    exec kubelet \
           --config=$JOB_DIR/etc/kubelet.yml \
           --container-runtime=remote \
           --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \
           --image-pull-progress-deadline=2m \
           --kubeconfig=$DAT_DIR/kubeconfig \
           --network-plugin=cni \
           --register-node=true \
           --hostname-override=<%= spec.id %>.k8s \
           --root-dir=/var/vcap/store/kubelet/ \
           --v=2
    echo "[$(date)] $BIN/$$: exec failed!"
    exit 42
    ;;


  stop)
    echo "[$(date)] $BIN/$$: shutting down..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          echo "[$(date)] $BIN/$$: sending SIGTERM for ${SIGTERM_FOR}s, followed by a SIGKILL..."
          for i in $(seq 1 $(expr $SIGTERM_FOR \* 10)); do
            kill -TERM $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGTERM)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done

          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGTERM) within ${SIGTERM_FOR}s; sending a SIGKILL and waiting ${SIGKILL_FOR}s..."
          for i in $(seq 1 $(expr $SIGKILL_FOR \* 10)); do
            kill -KILL $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGKILL)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done
          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGKILL) within ${SIGKILL_FOR}s; giving up."
          exit 1
        fi

        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi
    echo "[$(date)] $BIN/$$: shut down complete"
    exit 0
    ;;
esac
