#!/bin/bash
set -eu
<%

  port      = p('port').to_i
  peer_port = port + 1

-%>

JOB=etcd
BIN=etcd
SIGTERM_FOR=15
SIGKILL_FOR=5

RUN_DIR=/var/vcap/sys/run/$JOB
LOG_DIR=/var/vcap/sys/log/$JOB
JOB_DIR=/var/vcap/jobs/$JOB
CERTS_DIR=/var/vcap/data/k8s/certs
DAT_DIR=/var/vcap/store/k8s/$JOB
PIDFILE=$RUN_DIR/$JOB.pid
exec >>$LOG_DIR/$BIN.log 2>&1

# set etcd binaries in our path
export PATH=$PATH:/var/vcap/packages/etcd/bin

case $1 in
  start)
    mkdir -p $RUN_DIR

    echo "[$(date)] $BIN/$$: starting up..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          exit 1
        fi
        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi
    kill -9 $(pgrep etcd | grep -v $$) || true

    echo $$ > $PIDFILE
    exec etcd \
           --name "<%= spec.name %>-<%= spec.id %>"  \
           --cert-file=$CERTS_DIR/etcd/cert.pem \
           --key-file=$CERTS_DIR/etcd/key.pem \
           --peer-cert-file=$CERTS_DIR/etcd/cert.pem \
           --peer-key-file=$CERTS_DIR/etcd/key.pem \
           --trusted-ca-file=$JOB_DIR/tls/ca/cert.pem \
           --peer-trusted-ca-file=$JOB_DIR/tls/ca/cert.pem \
           --peer-client-cert-auth \
           --client-cert-auth \
           --initial-advertise-peer-urls https://<%= spec.ip %>:<%= peer_port %> \
           --listen-peer-urls https://<%= spec.ip %>:<%= peer_port %> \
           --listen-client-urls https://<%= spec.ip %>:<%= port %>,https://127.0.0.1:<%= port %> \
           --advertise-client-urls https://<%= spec.ip %>:<%= port %> \
           --initial-cluster-token etcd-cluster-0 \
           --initial-cluster <%= link('etcd').instances.map { |vm| "#{vm.name}-#{vm.id}=https://#{vm.address}:#{peer_port}" }.join(',') %> \
           --initial-cluster-state new \
           --data-dir=$DAT_DIR/etcd \
           <% if p('debug') %>--debug <% end %>\
           --log-output stdout
    echo "[$(date)] $BIN/$$: exec failed!"
    exit 42
    ;;


  stop)
    echo "[$(date)] $BIN/$$: shutting down..."
    if [[ -f $PIDFILE ]]; then
      PID=$(head -1 $PIDFILE)
      if [[ -n "$PID" ]]; then
        if [[ -e /proc/$PID ]]; then
          echo "[$(date)] $BIN/$$: found pid file $PIDFILE, with pid '$PID' (which is running)"
          echo "[$(date)] $BIN/$$: sending SIGTERM for ${SIGTERM_FOR}s, followed by a SIGKILL..."
          for i in $(seq 1 $(expr $SIGTERM_FOR \* 10)); do
            kill -TERM $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGTERM)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done

          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGTERM) within ${SIGTERM_FOR}s; sending a SIGKILL and waiting ${SIGKILL_FOR}s..."
          for i in $(seq 1 $(expr $SIGKILL_FOR \* 10)); do
            kill -KILL $PID || true
            if [[ ! -e /proc/$PID ]]; then
              echo "[$(date)] $BIN/$$: pid $PID terminated (via SIGKILL)"
              rm -f $PIDFILE
              echo "[$(date)] $BIN/$$: shut down complete"
              exit 0
            fi
            sleep 0.1
          done
          echo "[$(date)] $BIN/$$: pid $PID did not termiante (via SIGKILL) within ${SIGKILL_FOR}s; giving up."
          exit 1
        fi

        echo "[$(date)] $BIN/$$: found (stale) pid file $PIDFILE, with pid '$PID' (which is defunct)"
      fi
      rm -f $PIDFILE
    fi
    echo "[$(date)] $BIN/$$: shut down complete"
    exit 0
    ;;
esac
